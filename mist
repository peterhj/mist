#!/usr/bin/env python3

from datetime import datetime
import json
import os
import shutil
import sys
import urllib.request

HOME = os.environ["HOME"]
LOG_DIR = os.path.join(HOME, ".mist", "log")
API_ENDPOINT_URL = "https://api.mistral.ai/v1/chat/completions"
API_TOKEN = os.environ.get("MISTRAL_API_TOKEN", None)
if API_TOKEN is None:
    with open(os.path.join(HOME, ".mist", "api_token.txt"), "r") as api_token_file:
        API_TOKEN = api_token_file.read().strip()
API_HTTP_HEADERS = {
    "Content-Type": "application/json",
    "Accept": "application/json",
    "Authorization": "Bearer {}".format(API_TOKEN),
}
MODEL = os.environ.get("MISTRAL_MODEL", "mistral-large-latest")

def query(src_path):
    dt = datetime.now()
    d = "{}".format(dt.date())
    t = "{}".format(dt.time())
    timestamp = "{}-{}".format(d, t[:8].replace(":", "_"))
    src_name = os.path.basename(src_path)
    in_name = "{}.{}.in".format(src_name, timestamp)
    in_path = os.path.join(LOG_DIR, in_name)
    in_link = os.path.join(LOG_DIR, "{}.latest.in".format(src_name))
    out_name = "{}.{}.out".format(src_name, timestamp)
    out_path = os.path.join(LOG_DIR, out_name)
    out_link = os.path.join(LOG_DIR, "{}.latest.out".format(src_name))
    try:
        shutil.copyfile(src_path, in_path)
    except OSError:
        os.makedirs(LOG_DIR, exist_ok = True)
        shutil.copyfile(src_path, in_path)
    try:
        os.remove(out_link)
    except FileNotFoundError:
        pass
    try:
        os.remove(in_link)
    except FileNotFoundError:
        pass
    os.symlink(in_name, in_link)
    with open(in_path, "r") as in_file:
        req_content = in_file.read()
    print("{}".format(req_content))
    req_body = {
        "model": MODEL,
        "messages": [{"role": "user", "content": req_content}],
        "temperature": 0.0,
        "max_tokens": None,
        "stream": False,
    }
    req_data = json.dumps(req_body).encode("utf-8")
    req = urllib.request.Request(
        API_ENDPOINT_URL,
        headers = API_HTTP_HEADERS,
        data = req_data,
    )
    with urllib.request.urlopen(req) as res:
        res_data = res.read()
    res_body = json.loads(res_data.decode("utf-8"))
    res_content = res_body["choices"][0]["message"]["content"]
    print("{}".format(res_content))
    with open(out_path, "w") as out_file:
        out_file.write(res_content)
    os.symlink(out_name, out_link)

def main():
    for src_path in sys.argv[1:]:
        query(src_path)

if __name__ == "__main__":
    main()
