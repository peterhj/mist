#!/usr/bin/env python3

from datetime import datetime
import json
import os
import shutil
import sys
import urllib.request

def main():
    HOME = os.environ["HOME"]
    LOG_OUT_DIR = os.path.join(HOME, ".mistral", "log")
    API_ENDPOINT_URL = "https://api.mistral.ai/v1/chat/completions"
    API_TOKEN = os.environ["MISTRAL_API_TOKEN"]
    for arg in sys.argv[1:]:
        dt = datetime.now()
        d = "{}".format(dt.date())
        t = "{}".format(dt.time())
        timestamp = "{}-{}".format(d, t[:8].replace(":", "-"))
        stem = os.path.basename(arg)
        in_name = "{}.{}.in".format(stem, timestamp)
        in_path = os.path.join(LOG_OUT_DIR, in_name)
        in_link = os.path.join(LOG_OUT_DIR, "{}.latest.in".format(stem))
        out_name = "{}.{}.out".format(stem, timestamp)
        out_path = os.path.join(LOG_OUT_DIR, out_name)
        out_link = os.path.join(LOG_OUT_DIR, "{}.latest.out".format(stem))
        try:
            shutil.copyfile(arg, in_path)
        except OSError:
            os.makedirs(LOG_OUT_DIR, exist_ok = True)
            shutil.copyfile(arg, in_path)
        try:
            os.remove(in_link)
        except FileNotFoundError:
            pass
        os.symlink(in_name, in_link)
        with open(in_path, "r") as in_file:
            req_content = in_file.read()
        print("{}".format(req_content))
        req_body = {
            "model": "mistral-large-latest",
            "messages": [{"role": "user", "content": req_content}],
            "temperature": 0.0,
            #"top_p": None,
            #"max_tokens": None,
            "stream": False,
        }
        req_data = json.dumps(req_body).encode("utf-8")
        req_headers = {
            "Content-Type": "application/json",
            "Accept": "application/json",
            "Authorization": "Bearer {}".format(API_TOKEN),
        }
        req = urllib.request.Request(
            API_ENDPOINT_URL,
            headers = req_headers,
            data = req_data,
        )
        with urllib.request.urlopen(req) as res:
            res_data = res.read()
        res_body = json.loads(res_data.decode("utf-8"))
        res_content = res_body["choices"][0]["message"]["content"]
        print("{}".format(res_content))
        with open(out_path, "w") as out_file:
            out_file.write(res_content)
        try:
            os.remove(out_link)
        except FileNotFoundError:
            pass
        os.symlink(out_name, out_link)

if __name__ == "__main__":
    main()
